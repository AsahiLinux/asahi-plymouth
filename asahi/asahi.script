/* SPDX-License-Identifier: MIT */

/* Asahi Linux Plymouth Theme
 *
 * This theme emulates the macOS boot splash, with the Asahi logo
 * replacing the Apple logo.
 *
 *
 *
 * (C) 2022 James Calligeros
 */

// Init globals
width;
height;
logo;
beachball;
prompt;
message;
dialog;


fun rotate_beachball(i) {
    i = Math.Int(i); // Plymouth needs to convert to int for some reason

    if (! BBRotated[i]) {
        BBRotated[i] = beachball.image.Rotate((Math.Pi * 2 * i) / beachball.speed);
    }

    return BBRotated[i];

}


fun init() {
    // Get display properties
    width = Window.GetWidth();
    height = Window.GetHeight();

    // Set background colour to black
    Window.SetBackgroundTopColor(0.0, 0.0, 0.0);
    Window.SetBackgroundBottomColour(0.0, 0.0, 0.0);

    // Display logo
    logo.image = Image("asahi.png");
    logo.sprite = Sprite(logo.image);
    logo.x = ((width / 2) - (logo.image.GetWidth() / 2));
    logo.y = ((height / 2) - (logo.image.GetHeight() / 2));
    logo.sprite.SetPosition(logo.x, logo.y, 1000);
    logo.sprite.SetOpacity(1);

    // Initialise Apple spinner
    beachball.image = ImageNew("beachball3.png");
    beachball.sprite = SpriteNew();
    beachball.sprite.SetImage(rotate_beachball(0));
    beachball.x = ((width / 2) - (beachball.image.GetWidth() / 2));
    beachball.y = ((height/ 2) + (beachball.image.GetHeight()) + (logo.y * 0.65));
    beachball.sprite.SetPosition(beachball.x, beachball.y, 1000);
    beachball.i = 0;
    beachball.angle = 0;
    beachball.speed = 52;

}


fun display_prompt(vis) {
    // Make dialog prompt visible
    dialog.visible = vis;

    tbox.sprite.SetOpacity(vis);
    prompt.sprite.SetOpacity(vis);

    for (i=0; tbox.bullet[i]; i++) {
        tbox.bullet[i].sprite.SetOpacity(vis);
    }
}


fun disp_refresh() {
    if (dialog.visible) {
        beachball.sprite.SetOpacity(0);
    } else {
        beachball.i += 1;
        beachball.i %= beachball.speed;
        beachball.sprite.SetImage(rotate_beachball(beachball.i));
        beachball.sprite.SetOpacity(1);
    }
}

fun return_normal() {
    display_prompt(0);
}


fun password_prompt(text) {
    // There has to be a better way of doing this
    display_prompt(1);

    beachball.sprite.SetOpacity(0);
    prompt.image = Image.Text(text, 1, 1, 1, "center");
    prompt.sprite = Sprite(prompt.image);
    prompt.sprite.SetX((width / 2) - (dialog.image.GetWidth() / 2));
    prompt.sprite.SetY(beachball.y - 80)

    tbox.image = Image("tbox.png");
    tbox.bullet_image = Image("bullet.png");
    tbox.sprite = Sprite(tbox.image);
    tbox.x = ((width / 2) - (tbox.image.GetWidth() / 2));
    tbox.sprite.SetPosition(tbox.x, (beachball.y - 60), 1001);

    tbox.sprite.SetPosition

    for (i=0; tbox.bullet[i] || i<bullets; i++) {
        if (! tbox.bullet[i]) {
            tbox.bullet[i].sprite = SpriteNew();
            tbox.bullet[i].sprite.SetImage(tbox.bullet_image);
            tbox.bullet[i].x = tbox.sprite.GetX() + i * tbox.bullet_image.GetWidth() + tbox.image.GetWidth() * 0.03;
            tbox.bullet[i].y = tbox.sprite.GetY + tbox.image.GetHeight() / 2 - tbox.bullet_image.GetHeight() / 2;
            tbox.bullet[i].z = tbox.sprite.GetZ() + 1;
            tbox.bullet[i].sprite.SetPosition(tbox.bullet[i].x, tbox.bullet[i].y, tbox.bullet[i].z);
        }

        if (i < bullets) {
            tbox.bullet[i].sprite.SetOpacity(1);
        } else {
            tbox.bullet[i].sprite.SetOpacity(0);
        }

        if (tbox.bullet[i].x - tbox.sprite.GetX() >= tbox.image.GetWidth() * 0.97) {
            tbox.bullet[i].sprite.SetOpacity(0);
        }
    }
}


fun show_message(text) {
    message.text = Image.Text(text, 1, 1, 1, "center");
    message.sprite = Sprite(message.text);
    message.sprite.SetImage(message.text);
    message.x = ((width / 2) - (message.text.GetWidth() / 2));

    // Display message above the beachball
    message.sprite.SetPosition((message.x), (beachball.y - 80), 1001);
}


fun quit_cb() {
    beachball.sprite.SetOpacity(0);
}




// Run the splash screen
init();

// Declare callbacks to Plymouth API
Plymouth.SetRefreshFunction(disp_refresh);
Plymouth.SetDisplayNormalFunction(return_normal);
Plymouth.SetDisplayPasswordFunction(password_prompt);
Plymouth.SetMessageFunction(show_message);
Plymouth.SetQuitFunction(quit_cb);
Plymouth.SetUpdateStatusFunction(show_message);
